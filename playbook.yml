---
- name: Setup sudo access
  hosts: wordpress_servers
  become: true
  tasks:
    - name: Add current user to sudo group
      ansible.builtin.user:
        name: "{{ ansible_user }}"
        groups: sudo
        append: true

    - name: Set up sudo for current user
      ansible.builtin.copy:
        content: "{{ ansible_user }} ALL=(ALL) NOPASSWD:ALL"
        dest: "/etc/sudoers.d/{{ ansible_user }}"
        mode: "0o440"
        validate: /usr/sbin/visudo -cf %s

- name: Deploy WordPress with Docker
  hosts: wordpress_servers
  become: true
  vars_files:
    - vars/main.yml

  tasks:
    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
        state: present
        update_cache: true

    - name: Add Docker GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ ('arm64' if ansible_architecture == 'aarch64' else 'amd64') }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: true

    - name: Install Docker Engine and CLI Plugins
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        update_cache: true

    - name: Ensure Docker service is started and enabled
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: true
      become: true

    - name: Set correct permissions for Docker socket
      ansible.builtin.file:
        path: /var/run/docker.sock
        state: file
        mode: '0666'
      become: true

    - name: Verify Docker Compose Plugin
      ansible.builtin.command:
        cmd: docker compose version
      register: compose_version
      changed_when: false
      failed_when: false

    - name: Create project directory
      ansible.builtin.file:
        path: "{{ project_dir }}"
        state: directory
        mode: "0o755"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"

    - name: Create directories for MySQL data
      ansible.builtin.file:
        path: "{{ project_dir }}/{{ item }}"
        state: directory
        mode: "0o777"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - mysql_node1_data
        - mysql_node2_data
        - mysql_node3_data

    - name: Create ansible tmp directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.ansible/tmp"
        state: directory
        mode: "0o700"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        recurse: true

    - name: Create .env file
      ansible.builtin.copy:
        content: |
          MYSQL_ROOT_PASSWORD={{ mysql_root_password }}
          MYSQL_DATABASE={{ mysql_database }}
          MYSQL_USER={{ mysql_user }}
          MYSQL_PASSWORD={{ mysql_password }}
          MYSQL_REPLICATION_USER=repl_user
          MYSQL_REPLICATION_PASSWORD=repl_password
          MYSQL_MASTER_HOST=node1
          MYSQL_MASTER_PORT_NUMBER=3306
          MYSQL_MASTER_ROOT_PASSWORD={{ mysql_root_password }}
        dest: "{{ project_dir }}/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o600"

    - name: Copy prometheus config
      ansible.builtin.copy:
        src: prometheus.yml.j2
        dest: "{{ project_dir }}/prometheus.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o644"

    - name: Шаблонизировать docker-compose.yml
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "{{ project_dir }}/docker-compose.yml"
        mode: "0o644"

    - name: Copy MySQL configuration
      ansible.builtin.copy:
        src: mysql.cnf
        dest: "{{ project_dir }}/mysql.cnf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o644"

    - name: Ensure grafana provisioning directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0o755"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
      loop:
        - "{{ project_dir }}/grafana/provisioning/datasources"
        - "{{ project_dir }}/grafana/provisioning/dashboards"
        - "{{ project_dir }}/grafana/dashboards"

    - name: Copy provisioning для Grafana datasource
      ansible.builtin.template:
        src: ansible/templates/grafana-datasource.yml.j2
        dest: "{{ project_dir }}/grafana/provisioning/datasources/prometheus.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o644"

    - name: Copy provisioning для Grafana dashboard provider
      ansible.builtin.template:
        src: ansible/templates/grafana-dashboard-provider.yml.j2
        dest: "{{ project_dir }}/grafana/provisioning/dashboards/mysql-dashboard.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o644"

    - name: Копируем дашборд MySQL для Grafana
      ansible.builtin.template:
        src: ansible/templates/grafana-mysql-dashboard.json.j2
        dest: "{{ project_dir }}/grafana/dashboards/mysql-mysqld-exporter.json"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0o644"

    - name: Управление основным Docker Compose стеком
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose.yml
        state: present
        services:
          - node1
      become: true

    - name: Ожидание запуска мастер-узла MySQL
      ansible.builtin.pause:
        seconds: 10
        prompt: "Ожидаем запуска мастер-узла MySQL..."

    - name: Запуск узлов-реплик MySQL
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose.yml
        state: present
        services:
          - node2
          - node3
      become: true
      
    - name: Ожидание запуска реплик MySQL
      ansible.builtin.pause:
        seconds: 10
        prompt: "Ожидаем запуска узлов-реплик MySQL..."

    - name: Запуск остальных сервисов основного стека
      community.docker.docker_compose_v2:
        project_src: "{{ project_dir }}"
        files:
          - docker-compose.yml
        state: present
      become: true
 